// Generated by CoffeeScript 1.9.3
var _, log;

log = require('logger');

_ = require('lodash');

(function(exports) {
  var buildAccessLevels, buildRoles, config;
  config = {
    roles: ["public", "temp", "bot", "user", "admin"],
    accessLevels: {
      "public": "*",
      user: ["temp", "bot", "user", "admin"],
      registered: ["user", "admin"],
      admin: ["admin"]
    }
  };
  buildRoles = function(roles) {
    var bitMask, intCode, role, userRoles;
    bitMask = "01";
    userRoles = {};
    for (role in roles) {
      intCode = parseInt(bitMask, 2);
      userRoles[roles[role]] = {
        bitMask: intCode,
        title: roles[role]
      };
      bitMask = (intCode << 1).toString(2);
    }
    return userRoles;
  };
  buildAccessLevels = function(accessLevelDeclarations, userRoles) {
    var accessLevels, level, resultBitMask, role;
    accessLevels = {};
    for (level in accessLevelDeclarations) {
      if (typeof accessLevelDeclarations[level] === "string") {
        if (accessLevelDeclarations[level] === "*") {
          resultBitMask = "";
          for (role in userRoles) {
            resultBitMask += "1";
          }
          accessLevels[level] = {
            bitMask: parseInt(resultBitMask, 2),
            title: level
          };
        } else {
          log.error("Access Control Error: Could not parse '" + accessLevelDeclarations[level] + "' as access definition for level '" + level + "'");
        }
      } else {
        resultBitMask = 0;
        for (role in accessLevelDeclarations[level]) {
          if (userRoles.hasOwnProperty(accessLevelDeclarations[level][role])) {
            resultBitMask = resultBitMask | userRoles[accessLevelDeclarations[level][role]].bitMask;
          } else {
            log.error("Access Control Error: Could not find role '" + accessLevelDeclarations[level][role] + "' in registered roles while building access for '" + level + "'");
          }
        }
        accessLevels[level] = {
          bitMask: resultBitMask,
          title: level
        };
      }
    }
    return accessLevels;
  };
  exports.userRoles = _.zipObject(config.roles, config.roles);
  exports.userRolesAdvanced = buildRoles(config.roles);
  return exports.accessLevels = buildAccessLevels(config.accessLevels, exports.userRolesAdvanced);
})((typeof exports === "undefined" ? this["authConfig"] = {} : exports));
